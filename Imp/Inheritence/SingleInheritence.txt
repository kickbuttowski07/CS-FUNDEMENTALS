PUBLIC DERIVATION:

#include <iostream>
using namespace std;

class B {
    int a;
public:
    int b;
    void get_ab();
    int get_a(void);
    void show_a(void);
};

class D : public B { // public derivation
    int c;
public:
    void mul(void);
    void display(void);
};

void B :: get_ab(void) {
    a = 5, b = 10;
}

int B :: get_a(void) {
    return a;
}

void B :: show_a(void) {
    cout << "a = " << a << endl;
}

void D :: mul(void) {
    c = b * get_a();
}

void D :: display(void) {
    cout << "a = " << get_a() << endl;
    cout << "b = " << b << endl;
    cout << "c = " << c << endl;
}

int main(){
    D d;
    d.get_ab();
    d.mul();
    d.show_a();
    d.display();

    d.b = 20;
    d.mul();
    d.display();
}


PRIVATE DERIVATION:

#include <iostream>
using namespace std;

class B {
    int a;
public:
    int b;
    void get_ab();
    int get_a(void);
    void show_a(void);
};

class D : private B { // private derivation
    int c;
public:
    void mul(void);
    void display(void);
};

void B :: get_ab(void) {
    a = 5, b = 10;
}

int B :: get_a(void) {
    return a;
}

void B :: show_a(void) {
    cout << "a = " << a << endl;
}

void D :: mul(void) {
    get_ab();
    c = b * get_a();
}

void D :: display(void) {
    cout << "a = " << show_a() << endl;
    cout << "b = " << b << endl;
    cout << "c = " << c << endl;
}

int main(){
    D d;
    d.mul();
    d.show_a();
    d.display();

    d.b = 20;
    d.mul();
    d.display();
}



