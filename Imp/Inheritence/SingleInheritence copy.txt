PUBLIC DERIVATION:

#include <iostream>
using namespace std;

class B {
    int a;
public:
    int b;
    void get_ab();
    int get_a(void);
    void show_a(void);
};

class D : public B { // public derivation
    int c;
public:
    void mul(void);
    void display(void);
};

void B :: get_ab(void) {
    a = 5, b = 10;
}

int B :: get_a(void) {
    return a;
}

void B :: show_a(void) {
    cout << "a = " << a << endl;
}

void D :: mul(void) {
    c = b * get_a();
}

void D :: display(void) {
    cout << "a = " << get_a() << endl;
    cout << "b = " << b << endl;
    cout << "c = " << c << endl;
}

int main(){
    D d;
    d.get_ab();
    d.mul();
    d.show_a();
    d.display();

    d.b = 20;
    d.mul();
    d.display();
}


PRIVATE DERIVATION:

#include <iostream>
using namespace std;

class B {
    int a;
public:
    int b;
    void get_ab();
    int get_a(void);
    void show_a(void);
};

class D : private B { // private derivation
    int c;
public:
    void mul(void);
    void display(void);
};

void B :: get_ab(void) {
    a = 5, b = 10;
}

int B :: get_a(void) {
    return a;
}

void B :: show_a(void) {
    cout << "a = " << a << endl;
}

void D :: mul(void) {
    get_ab();
    c = b * get_a();
}

void D :: display(void) {
    cout << "a = " << show_a() << endl;
    cout << "b = " << b << endl;
    cout << "c = " << c << endl;
}

int main(){
    D d;
    d.mul();
    d.show_a();
    d.display();

    d.b = 20;
    d.mul();
    d.display();
}

AMBIGUITY:
 
class A {
    public:
        void display(void) {
            cout << "A\n";
        }
};

class B : public A {
    public:
        void display(void) {
            cout << "B\n";
        }
};

B result class contains:
public:
    void display(void); // display in B
    void display(void); // display in A

In this case function in the derived class OVERRIDES the inherited function.
B.display() -> invoke function defined in B only.
we can invoke the function defined in A by using scope resolution operator to specify class.

int main() {
    B b;
    b.display(); // display() in B
    b.A::display() // display() in a
    b.B::display() // display() in B
}

Construction of classes:
First, the most-base class (at the top of the inheritance tree) is constructed. 
Then each child class is constructed in order, until the most-child class (at the bottom of the inheritance tree) is constructed last.

so for each class it is constructed whole tree, from top to bottom.

#include <iostream>

class Base {
public:
    int m_id {};

    Base(int id=0) : m_id { id } {
        std::cout << "Base\n";
    }

    int getId() const { 
        return m_id; 
    }
};

class Derived: public Base {
public:
    double m_cost {};

    Derived(double cost = 0.0) : m_cost { cost } {
        std::cout << "Derived\n";
    }

    double getCost() const { return m_cost; }
};

int main() {
    std::cout << "Instantiating Base\n";
    Base base;

    std::cout << "Instantiating Derived\n";
    Derived derived;

    return 0;
}

Result:
Instantiating Base
Base
Instantiating Derived
Base
Derived


