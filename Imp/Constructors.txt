*** whenever multiple constructors defined, declare "DO NOTHING" constructor to satisfy the compiler.
class A {
    int a;
    public:
        A();
        A(int a = 0);
        ambiguity.
};

CONSTRUCTOR:
special member function.
Task is to initialise the objects of its classes.
constructor because constructs the values of data members.

Properties : 
1. It should be declared in the PUBLIC section of the class.
2. It is automatically INVOKED whenever an object is created.
3. It DON'T have return type (not even void) and it DON'T return values.
4. It CAN have default arguments. like (int a = 9) in the function arguments.
5. We CANNOT refer to thier address.
6. If we DON'T specify a constructor, C++ compiler generates a default constructor for us (expects no parameters and has an empty body).
7. they cannot be inherited, though a derived class can call the base class constructor.
8. They CAN'T be VIRTUAL.
9. Can make implicit calls to "new and delete" operations when dynamic memory allocation is needed.


DEFAULT CONSTRUCTOR:
A default constructor is a constructor that can be called with no parameters.
It is also called a zero-argument constructor. 
It is either defined explicitly by the programmer or implicitly generated by the compiler :
1. No user defined constructor
2. explicitly defined default constructor
3. with Initialisation of class members


PARAMETERISED CONSTRUCTOR:
Parameters can be any type except, the class itself.
can be INLINE(simple constructor declared inside the class)
Parameterized Constructors make it possible to pass arguments to initialize an object when it is created.

if defined a parameterised constructor and not explicitly declared default constructor, compiler WON'T create default constructor, so creating object as :
        Class_name obj_name; 
        
OP: error 


****  Whenever we define one or more non-default constructors( with parameters ) for a class, a default constructor(without parameters) should also be explicitly defined as the compiler will not provide a default constructor in this case.

better: define default constructor for best practice
Default parameters with parameterised constructor(Right to left ordering)

Member Initializer Lists in Constructor
Member initializer list provides a clean and compact way to initialize data members of the class using parameterized constructor.

Syntax of Member Initializer List:

ClassName (p1, p2, ...) : mem1(p1),  mem2(p2) ... {};



COPY CONSTRUCTOR:
A copy constructor is a type of constructor that creates an object using another object of the same class. 
The process of initializing members of an object through a copy constructor is known as copy initialization. 
It is also called member-wise initialization because the copy constructor initializes one object with the existing object, both belonging to the same class on a member-by-member copy basis.


#include <iostream>
using namespace std;

class A {
public:
    int val;
    
    // Parameterized constructor
    A(int x) {
        val = x;
    }
    
    // Copy constructor
    // but cannot be A(A a)
    A(A& a) {
        val = a.val;
    }
};
int main() {
    A a1(20);
    
    // Creating another object from a1
    A a2(a1);
    
  	cout << a2.val;
    return 0;
}



MOVE CONSTRUCTOR:

The move constructor is a recent addition to the family of constructors in C++. 
It is like a copy constructor that constructs the object from the already existing objects., but instead of copying the object in the new memory, it makes use of move semantics to transfer the ownership of the already created object to the new object without creating extra copies. 
It can be seen as stealing the resources from other objects.

The move constructor uses std::move() to transfer ownership of resources and it is called when a temporary object is passed or returned by value.

#include <iostream>
#include <vector>
using namespace std; 

class MyClass {
private:
    int b;

public:
    // Constructor
    MyClass(int &&a) : b(move(a)) {
        cout << "Move constructor called!" << endl;
    }

    void display() {
            cout << b <<endl;
    }
};

int main() {
    int a = 4;
    MyClass obj1(move(a));  // Move constructor is called

    obj1.display();
    return 0;
}
